import base64
import io
import pandas as pd
import dash
from dash import html, dcc, Output, Input, State, callback_context
import dash_bootstrap_components as dbc
from dash_iconify import DashIconify
import plotly.graph_objs as go  # –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞

from toolkits.predict import load_model, predict

external_stylesheets = [dbc.themes.DARKLY]

app = dash.Dash(__name__, external_stylesheets=external_stylesheets)
app.title = "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
tokenizer, model = load_model()

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
MAIN_BG_COLOR = "#222222"
BORDER_COLOR = "#505050"
CARD_BG_COLOR = "#303030"
TEXT_COLOR = "#E0E0E0"
ACCENT_COLOR = "#505050"
PLACEHOLDER_COLOR = "#888888"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Å–æ–≤ (–ª–∏–±–æ None, –ª–∏–±–æ —Å–ª–æ–≤–∞—Ä—å)
classes_counts = None

app.layout = dbc.Container([
    # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ URL (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    dcc.Location(id='url', refresh=False),
    # –°–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    html.Div(id='page-init', style={'display': 'none'}),
    # Store –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    dcc.Store(id='stored-file', data={'contents': None, 'filename': None}),
    # Store –¥–ª—è —Ñ–ª–∞–≥–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    dcc.Store(id='data-processed', data=False),

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    html.H2("–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
            style={"textAlign": "center", "color": TEXT_COLOR, "marginBottom": "20px", 'fontWeight': 'bold'}),

    # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–∑–∞–≥—Ä—É–∑–∫–∞, —Å–±—Ä–æ—Å, –∞–Ω–∞–ª–∏–∑)
    dbc.Row([
        dbc.Col(
            dcc.Upload(
                id='upload-data',
                children=html.Div([
                    'üìÇ ',
                    html.A('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (CSV/XLSX)', style={"color": TEXT_COLOR})
                ]),
                style={
                    'width': '100%',
                    'height': '50px',
                    'lineHeight': '50px',
                    'borderRadius': '50px',
                    'textAlign': 'center',
                    'backgroundColor': CARD_BG_COLOR,
                    'color': TEXT_COLOR,
                },
                style_active={
                    'backgroundColor': '#505050',
                    'transition': '0.1 background-color'
                },
                multiple=False
            ), width=8
        ),
        dbc.Col(
            dbc.Button(
                [DashIconify(icon="mdi:trash-can-outline", color="white", width=20)],
                id="reset-button",
                className="w-100",
                style={
                    "backgroundColor": MAIN_BG_COLOR,
                    "borderRadius": "50px",
                    "color": "white",
                    "height": "50px",
                    'border': f"1px solid {BORDER_COLOR}"
                }
            ),
            width=2
        ),
        dbc.Col(
            dbc.Button(
                [DashIconify(icon="mdi:chart-bar", color="white", width=20)],
                id="analyze-button",
                className="w-100",
                n_clicks=0,
                # –°—Ç–∏–ª—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ callback
                style={
                    "backgroundColor": MAIN_BG_COLOR,
                    "borderRadius": "50px",
                    "color": "white",
                    "height": "50px",
                    'border': f"1px solid {BORDER_COLOR}"
                }
            ),
            width=2
        ),
    ], className="mt-3 mb-3",
       style={"borderBottom": f"1px solid {BORDER_COLOR}", "paddingBottom": "15px"}),

    # –û–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º)
    html.Div(id='output-data-container', children=[
        html.Div("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö...", id="no-data-text", style={
            "display": "flex",
            "alignItems": "center",
            "justifyContent": "center",
            "height": "100%",
            "color": PLACEHOLDER_COLOR,
            "fontSize": "18px"
        }),
        html.Div(
            id='output-data-upload',
            style={
                "display": "none",
                "height": "100%",
                "overflow": "auto",
                "position": "relative",
                "scrollbarWidth": "thin",
                "scrollbarColor": f"{BORDER_COLOR} {CARD_BG_COLOR}",
            }
        )
    ], style={
        "backgroundColor": CARD_BG_COLOR,
        "borderRadius": "10px",
        "padding": "10px",
        "border": f"1px solid {BORDER_COLOR}",
        "height": "65vh",
        "maxWidth": "100%",
        "overflow": "hidden",
    }),

    dbc.Modal([
        dbc.ModalHeader(dbc.ModalTitle("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º", style={"color": TEXT_COLOR})),
        dbc.ModalBody([
            dcc.Graph(id='pie-chart'),
            html.Hr(),
            html.Div(id='other-metrics')
        ], style={"backgroundColor": CARD_BG_COLOR, "color": TEXT_COLOR}),
        dbc.ModalFooter(
            dbc.Button("–ó–∞–∫—Ä—ã—Ç—å", id="close-modal", className="ms-auto",
                       style={"backgroundColor": ACCENT_COLOR, "borderRadius": "10px", "border": "none"})
        )
    ], id="modal", is_open=False, size="lg")
], fluid=True, style={"backgroundColor": MAIN_BG_COLOR, "width": "80%", "marginTop": "20px"})

# –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ URL —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
@app.callback(
    Output('page-init', 'children'),
    Input('url', 'pathname')
)
def initialize_page(pathname):
    global classes_counts
    classes_counts = None
    return ""

def parse_contents(contents, filename):
    """ –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ pandas, –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∞—Å—Å–æ–≤. """
    global classes_counts
    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)

    try:
        if 'csv' in filename.lower():
            df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
        elif 'xlsx' in filename.lower():
            df = pd.read_excel(io.BytesIO(decoded))
        else:
            return None

        marked_df, counts = predict(model, tokenizer, df)
        classes_counts = counts  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return marked_df
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", e)
        return None

@app.callback(
    [Output('stored-file', 'data'),
     Output('upload-data', 'contents')],
    [Input('upload-data', 'contents'), Input('reset-button', 'n_clicks')],
    [State('upload-data', 'filename'), State('stored-file', 'data')]
)
def update_store(contents, reset_clicks, filename, stored_data):
    ctx = callback_context
    global classes_counts
    if not ctx.triggered:
        raise dash.exceptions.PreventUpdate
    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]

    if trigger_id == 'reset-button':
        classes_counts = None
        return {'contents': None, 'filename': None}, None
    elif trigger_id == 'upload-data' and contents is not None:
        return {'contents': contents, 'filename': filename}, contents
    return stored_data, contents

# –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
@app.callback(
    [Output('output-data-upload', 'children'),
     Output('output-data-upload', 'style'),
     Output('no-data-text', 'style'),
     Output('data-processed', 'data')],
    Input('stored-file', 'data')
)
def update_output(stored_data):
    if stored_data and stored_data.get('contents'):
        df = parse_contents(stored_data['contents'], stored_data['filename'])
        if df is not None:
            table = dbc.Table.from_dataframe(
                df,
                striped=True,
                bordered=True,
                hover=True,
                style={
                    "color": TEXT_COLOR,
                    "backgroundColor": CARD_BG_COLOR,
                    "width": "100%",
                    "tableLayout": "auto",
                }
            )
            return (
                html.Div([
                    html.Div(table, style={
                        "overflow": "auto",
                        "height": "calc(65vh - 40px)",
                        "scrollbarWidth": "thin",
                        "scrollbarColor": f"{BORDER_COLOR} {CARD_BG_COLOR}",
                    })
                ]),
                {"display": "block"},
                {"display": "none"},
                True  # –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            )
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ñ–ª–∞–≥ False
    return html.Div(), {"display": "none"}, {
        "display": "flex",
        "alignItems": "center",
        "justifyContent": "center",
        "height": "100%",
        "color": PLACEHOLDER_COLOR,
        "fontSize": "18px"
    }, False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
@app.callback(
    Output("modal", "is_open"),
    [Input("analyze-button", "n_clicks"), Input("close-modal", "n_clicks")],
    State("modal", "is_open")
)
def toggle_modal(n_open_analyze, n_close, is_open):
    ctx = callback_context
    if not ctx.triggered:
        raise dash.exceptions.PreventUpdate
    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
    if trigger_id == "analyze-button":
        return not is_open
    elif trigger_id == "close-modal":
        return False
    return is_open

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞. –û–Ω —Å—Ç—Ä–æ–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (classes_counts –æ–±–Ω–æ–≤–ª—ë–Ω)
@app.callback(
    Output("pie-chart", "figure"),
    Input("modal", "is_open")
)
def update_pie_chart(is_open):
    global classes_counts
    if is_open and classes_counts is not None:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –¥–æ 3, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ
        items = sorted(classes_counts.items(), key=lambda x: x[1], reverse=True)
        if len(items) > 3:
            items = items[:3]
        labels, values = zip(*items)
        fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.3)])
        fig.update_layout(
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤",
            paper_bgcolor=CARD_BG_COLOR,
            plot_bgcolor=CARD_BG_COLOR,
            font_color=TEXT_COLOR
        )
        return fig
    return go.Figure()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:
# –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.
@app.callback(
    [Output("analyze-button", "disabled"),
     Output("analyze-button", "style")],
    [Input("stored-file", "data"), Input("data-processed", "data")]
)
def update_analyze_button(stored_data, data_processed):
    base_style = {
        "backgroundColor": MAIN_BG_COLOR,
        "borderRadius": "50px",
        "color": "white",
        "height": "50px",
        'border': f"1px solid {BORDER_COLOR}"
    }
    if stored_data is None or stored_data.get("contents") is None or not data_processed:
        disabled_style = base_style.copy()
        disabled_style["backgroundColor"] = "#1a1a1a"  # —Ñ–æ–Ω —á—É—Ç—å —Ç–µ–º–Ω–µ–µ
        return True, disabled_style
    return False, base_style


if __name__ == '__main__':
    app.run_server(debug=True, dev_tools_ui=False, threaded=True, mode="external")
